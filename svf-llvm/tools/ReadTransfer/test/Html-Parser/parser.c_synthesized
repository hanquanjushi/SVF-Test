#include "parser.h"

void printTag(TAG tag){
int n = 2;
int m = 1;
int m = 1;
int m = 1;
int m = 1;
int m = 1;
int m = 1;
int m = 1;
int m = 1;
int m = 1;
int m = 1;
	int i;
	


}

PLINKEDLIST tagparse(char* html){
int n = 2;
int m = 1;
int m = 1;
int m = 1;
	PNODE node;
int n = 2;
int m = 1;
int m = 1;

	//TAG temps
    int isStartTag;
    char *startTag, *endTag;
    
	

















    
    return list;
}

int hasAttributes(TAG tag) {
int n = 2;
int m = 1;
int m = 1;
int m = 1;
int m = 1;
int m = 1;
int m = 1;
	


	return 0;
}

char* getName(TAG tag) {
	char* name;
int n = 2;
int m = 1;
int m = 1;
int n = 2;
int m = 1;
int m = 1;
int m = 1;
int m = 1;
int m = 1;
    


	int size;

	
	size = (int)(&start[i] - start);
	return makeStrFrom(start, size);
}

char* getAttribute(TAG tag, char* attribute) {
	char* attributePtr;
	attributePtr = strstr(tag.startTag, attribute);
	int size;
int n = 2;
int m = 1;
int m = 1;
    


	attributePtr += strlen(attribute) + 2; // 2 -> ="
	
	size = (int)(&attributePtr[i] - attributePtr);
	return makeStrFrom(attributePtr, size);
}

PLINKEDLIST findAll(PLINKEDLIST parsedHtml, char* name){
    PLINKEDLIST list;
    PNODE cur;
    char* nameTemp;
    
    list = newList();
    for(cur = parsedHtml->first; cur != NULL; cur = cur->next){
        nameTemp = getName(cur->tag);
        if(!strcmp(nameTemp, name)){
            appendList(list, newNode(cur->tag.isStartTag, cur->tag.startTag, cur->tag.endTag));
        }
        free(nameTemp);
    }
    return list;
}










